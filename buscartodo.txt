from google.oauth2          import service_account
from googleapiclient.discovery          import build

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
KEY = 'key.json'
SPREADSHEET_ID = '1dvpWYUKYYmdkTBPEvfczZZzSAVgrOtL10A130zrjMUM'

creds = None
creds = service_account.Credentials.from_service_account_file(KEY, scopes=SCOPES)

service = build('sheets', 'v4', credentials=creds)
sheet = service.spreadsheets()

----------------------------------------------------------------------------------------

#buscador especifico
@app.route("/buscar" , methods=["GET"])
def buscar_dato():
    dato = request.args.get('buscar')
    # Obtener los datos actuales de la hoja
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='A:I').execute()
    values = result.get('values', [])

    resultados = []
    # Buscar filas que coincidan con el criterio de búsqueda
    for row in values[1:]:
        # Comprobar si el dato coincide con alguna columna (ID, nombre, apellido, dirección)
        if dato.lower() in [col.lower() for col in row]:
            resultados.append(row)
    if resultados:
        return render_template("list.html", val=resultados)
    else:
        row=["No encontraron resultados"]
        resultados.append(row)
        return render_template("list.html",val=resultados)
    

-------------------------------------------------------------------------------------------------

#buscador general 

@app.route("/buscar", methods=["GET"])
def buscar_dato():
    criterio = request.args.get('buscar')
    # Obtener los datos actuales de la hoja
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='A:I').execute()
    values = result.get('values', [])

    resultados = []
    # Buscar filas que contengan el criterio de búsqueda en alguna columna
    for row in values[1:]:
        # Verificar si alguna columna contiene el criterio de búsqueda
        if any(criterio.lower() in col.lower() for col in row):
            resultados.append(row)

    if resultados:
        return render_template("list.html", val=resultados)
    else:
        row = ["No se encontraron resultados"]
        resultados.append(row)
        return render_template("list.html", val=resultados)

---------------------------------------------------------------------------------------------------------
#### Borrar
@app.route('/&&A/delete/<int:id>')
def deletel(id):
    sheet_name = 'Sheet1'
    row_index = id

    # Construir la solicitud para eliminar la fila
    requests = [
        {
            'deleteDimension': {
                'range': {
                    'sheetId': 0,  # ID de la hoja de cálculo (0 para la primera hoja)
                    'dimension': 'ROWS',
                    'startIndex': row_index - 1,  # Restamos 1 porque los índices de fila comienzan desde 0
                    'endIndex': row_index
                }
            }
        }
    ]

    # Enviar la solicitud para eliminar la fila y ajustar las dimensiones
    batch_update_request = service.spreadsheets().batchUpdate(
        spreadsheetId=SPREADSHEET_ID,
        body={'requests': requests}
    )
    response = batch_update_request.execute()

    result = sheet.values().get(spreadsheetId = SPREADSHEET_ID, range = '&&A!A2:AA1000').execute()
    values = result.get('values',[])
    return render_template("&&a/list_&&a.html",val=values)


_____________________________________________________________________________________________________________
rout? = empresas['empresa?']['rout']
compani? = empresas['empresa?']['compani']

@app.route(rout?+"list")
def &&_listarl():
    return compani?.listl()

@app.route(rout?+"list/<int:id>")
def &&_listar_id(id):
    return compani?.listlid(id)

@app.route(rout?)
def &&_listar_cre1():
    return compani?.createl()

@app.route(rout?+"create2", methods=["POST"])
def &&_listar_cre2():
    return compani?.create2l()

@app.route(rout?+"/stade/<int:id>")
def &&_stade(id):
    return compani?.inactive(id)



_____________________________________________________________________________________________________________


